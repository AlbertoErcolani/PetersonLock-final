%%
% @theory: Peterson
% @author: alberto
%
% DISCLAIMER: the code hereby provided is adapted from the companion code of:
%
% Robert Colvin, Lindsay Groves, Victor Luchangco, and Mark Moir.
%	Formal Verification of a Lazy Concurrent List-Based Set Algorithm.
%	In Thomas Ball and Robert B. Jones, editors, Computer Aided Verification, pages 475-488, Berlin, Heidelberg, 2006.
%	Springer Berlin Heidelberg.
%	doi:10.1007/11817963_44.
%
% This project aims at modelling and proving the Peterson-lock algorithm
% satisfies mutual exclusion. Proofs are provided in such a way unexperienced PVS users
% can compare mechanical and formal proofs, with the hope the access to mechanized proofs
% results easier. An analogous model and proof are provided in Nancy Lynch's book:
%
% Nancy A. Lynch.
% Distributed Algorithms. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 1996
% 
%%
main : THEORY
BEGIN
    IMPORTING Lemmata
    
    %%%%%%%%%%%%%%%%%
    MutualExclusion(s:Peterson.cpState) : bool =
      FORALL (p,q:PROC) : NOT ( s`pc(p)=pcL5 AND s`pc(q)=pcL5 AND p/=q)
    inv_3 : THEOREM
      invariant(co_ioa_inst, MutualExclusion)
    %%%%%%%%%%%%%%%%%

END main