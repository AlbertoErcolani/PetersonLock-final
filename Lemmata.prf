(Lemmata
 (inv_1 0
  (inv_1-1 nil 3828168404
   ("" (inv-setup)
    (("1" (assert -1)
      (("1" (load-rewrites "Peterson")
        (("1" (assert -1)
          (("1" (expand "ActivityInvariant")
            (("1" (skos 1 p) (("1" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (expand "ActivityInvariant")
      (("2" (skos 1 p)
        (("2" (inst ind-hyp p)
          (("2" (case "proc(alpha)/=p")
            (("1" (for-alpha :lazy? nil) nil nil)
             ("2" (for-alpha :lazy? nil) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transition const-decl "bool" IOA nil)
    (Effect const-decl "cpState" Peterson nil)
    (GetDstPCForAction const-decl "PCs" Peterson nil)
    (GetEffectForAction const-decl "cpState" Peterson nil)
    (Precondition const-decl "bool" Peterson nil)
    (GetPcForAction const-decl "PCs" Peterson nil)
    (LockPrecondition const-decl "bool" Peterson nil)
    (LockInv? adt-recognizer-decl "[action -> boolean]" actions nil)
    nil (action_LockInv_eta formula-decl nil actions nil)
    (LockRet? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_LockRet_eta formula-decl nil actions nil)
    (lock1? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock1_eta formula-decl nil actions nil)
    (lock2? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock2_eta formula-decl nil actions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lock3T? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock3T_eta formula-decl nil actions nil)
    (lock3F? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock3F_eta formula-decl nil actions nil)
    (lock4T? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock4T_eta formula-decl nil actions nil)
    (lock4F? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock4F_eta formula-decl nil actions nil)
    (unlock1? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_unlock1_eta formula-decl nil actions nil)
    (action_inclusive formula-decl nil actions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (proc shared-adt-accessor-decl "[action -> PROC]" actions nil)
    (InitialStatePredicate const-decl "bool" Peterson nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (reachable?_induction formula-decl nil IOA nil)
    (IOA type-eq-decl nil IOA nil)
    (CO_IOA type-eq-decl nil Peterson nil)
    (co_ioa_inst const-decl "CO_IOA" Peterson nil)
    (ActivityInvariant const-decl "bool" Lemmata nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PCs type-decl nil Peterson nil)
    (cpState type-eq-decl nil Peterson nil)
    (action type-decl nil actions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (external adt-def-decl "boolean" actions nil)
    (internal adt-def-decl "boolean" actions nil)
    (action? nonempty-type-eq-decl nil actions nil)
    (invariant const-decl "bool" invariant nil))
   shostak))
 (inv_2 0
  (inv_2-1 nil 3842788757
   ("" (inv-setup)
    (("1" (load-rewrites "Peterson")
      (("1" (assert) (("1" (skos 1 p q) (("1" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (expand "VictimInvariant2")
      (("2" (skos 1 p q)
        (("2" (inst ind-hyp p q)
          (("2" (case "proc(alpha)=p OR proc(alpha)=q")
            (("1" (case "p=q")
              (("1" (flatten concl) nil nil)
               ("2" (split)
                (("1" (for-alpha :lazy? nil)
                  (("1" (flatten concl)
                    (("1" (delete ind-hyp)
                      (("1" (typepred p q "proc(alpha)")
                        (("1" (in-fact "p=0 AND q=1 OR p=1 AND q=0")
                          (("1" (inv-apply inv_1 s0)
                            (("1" (inv-apply inv_1 s0)
                              (("1"
                                (expand "ActivityInvariant")
                                (("1"
                                  (inst -1 p)
                                  (("1"
                                    (inst -2 q)
                                    (("1"
                                      (in-fact "s0`level(q)")
                                      (("1"
                                        (in-fact "s0`level(p)" (-3 -4))
                                        (("1"
                                          (in-fact "s0`victim=p")
                                          (("1"
                                            (in-fact
                                             "proc(alpha)=0 OR proc(alpha)=1")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    ";;; Ready to prove this case: transition is expanded w.r.t. alpha"))
                  nil)
                 ("2" (for-alpha :lazy? nil) nil nil))
                nil))
              nil)
             ("2" (for-alpha :lazy? nil) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (action_inclusive formula-decl nil actions nil)
    (transition const-decl "bool" IOA nil)
    (Effect const-decl "cpState" Peterson nil)
    (GetDstPCForAction const-decl "PCs" Peterson nil)
    (GetEffectForAction const-decl "cpState" Peterson nil)
    (Precondition const-decl "bool" Peterson nil)
    (GetPcForAction const-decl "PCs" Peterson nil)
    (LockPrecondition const-decl "bool" Peterson nil)
    (unlock1? adt-recognizer-decl "[action -> boolean]" actions nil)
    (alpha skolem-const-decl "action?" Lemmata nil)
    (action_unlock1_eta formula-decl nil actions nil)
    (lock4F? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock4F_eta formula-decl nil actions nil)
    (lock4T? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock4T_eta formula-decl nil actions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lock3F? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock3F_eta formula-decl nil actions nil)
    (lock2? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock2_eta formula-decl nil actions nil)
    (lock1? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock1_eta formula-decl nil actions nil)
    (LockRet? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_LockRet_eta formula-decl nil actions nil)
    (LockInv? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_LockInv_eta formula-decl nil actions nil)
    (lock3T? adt-recognizer-decl "[action -> boolean]" actions nil)
    (action_lock3T_eta formula-decl nil actions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ActivityInvariant const-decl "bool" Lemmata nil)
    (inv_1 formula-decl nil Lemmata nil)
    (proc shared-adt-accessor-decl "[action -> PROC]" actions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (InitialStatePredicate const-decl "bool" Peterson nil)
    (reachable?_induction formula-decl nil IOA nil)
    (IOA type-eq-decl nil IOA nil)
    (CO_IOA type-eq-decl nil Peterson nil)
    (co_ioa_inst const-decl "CO_IOA" Peterson nil)
    (VictimInvariant2 const-decl "bool" Lemmata nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PCs type-decl nil Peterson nil)
    (cpState type-eq-decl nil Peterson nil)
    (action type-decl nil actions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (external adt-def-decl "boolean" actions nil)
    (internal adt-def-decl "boolean" actions nil)
    (action? nonempty-type-eq-decl nil actions nil)
    (invariant const-decl "bool" invariant nil))
   shostak)))

